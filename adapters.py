# -*- coding: utf-8 -*-
"""adapters.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/105XW5xqmadQfxhUCp2_NZPYYD5Cvdhkk
"""

# import gradio as gr
# from groq import Groq
# import os
# from dotenv import load_dotenv

# load_dotenv()

# os.environ['GROQ_API_KEY'] = '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'
# client = Groq(api_key=os.getenv("GROQ_API_KEY"))

# def chat_with_bot(messages):
#     chat_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in messages])
#     bot_response = llm(chat_history)
#     messages.append({"role": "assistant", "content": bot_response})
#     return messages

# def llm(chat_history, custom_prompt):
#     try:
#         completion = client.chat.completions.create(
#             model="llama3-8b-8192",
#             messages=[
#                 {"role": "system", "content": custom_prompt},
#                 {"role": "user", "content": f"chat_history:{chat_history}"}
#             ],
#             temperature=1,
#             max_tokens=1024,
#             top_p=1,
#             stream=True,
#             stop=None,
#         )

#         bot_response = ""
#         for chunk in completion:
#             bot_response += chunk.choices[0].delta.content or ""
#         return bot_response
#     except Exception as e:
#         return f"An error occurred: {str(e)}"

# # Define Chatbot 1 with a specific prompt
# def qlora():
#     def respond_bot1(user_input, messages):
#         custom_prompt_bot1 = """
#             You are a under qualified, strict and temperamental doctor with limited experience.
#             Always give answer under 5 words.
#             Do not reveal any information about being an AI or disclaim your role.
#             Mostly give wrong answers.
#             Avoid suggesting that the patient consults other professionals or seeks help elsewhere.
#             Don't add any disclaimers or out-of-character remarks.
#         """
#         messages.append({"role": "user", "content": user_input})
#         chat_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in messages])
#         bot_response = llm(chat_history, custom_prompt_bot1)
#         messages.append({"role": "assistant", "content": bot_response})
#         return messages, ""

#     with gr.Blocks() as qlora_demo:
#         gr.Markdown("# DOCTOR BOT -- QLORA")
#         chatbot1 = gr.Chatbot(type="messages", label="Chat with Doctor Bot QLORA")
#         user_input1 = gr.Textbox(placeholder="Type your message here...", label="Your Message", interactive=True)
#         submit_button1 = gr.Button("Send")
#         messages1 = gr.State([])
#         submit_button1.click(respond_bot1, [user_input1, messages1], [chatbot1, user_input1])

#         qlora_demo.launch(share=True)

# # Define Chatbot 2 with a different prompt
# def ia3():
#     def respond_bot2(user_input, messages):
#         custom_prompt_bot2 = """
#             You are a beginner level DOCTOR.
#             Do not reveal any information about being an AI or disclaim your role..
#             Give short answeres.
#             Dont tell about yourself.
#             Dont tell confidence level.
#         """
#         messages.append({"role": "user", "content": user_input})
#         chat_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in messages])
#         bot_response = llm(chat_history, custom_prompt_bot2)
#         messages.append({"role": "assistant", "content": bot_response})
#         return messages, ""

#     with gr.Blocks() as ia3_demo:
#         gr.Markdown("# DOCTOR BOT -- IA3")
#         chatbot2 = gr.Chatbot(type="messages", label="Chat with Doctor Bot IA3")
#         user_input2 = gr.Textbox(placeholder="Type your message here...", label="Your Message", interactive=True)
#         submit_button2 = gr.Button("Send")
#         messages2 = gr.State([])
#         submit_button2.click(respond_bot2, [user_input2, messages2], [chatbot2, user_input2])

#         ia3_demo.launch(share=True)

# def loading_qlora_and_ia3():
#   print('QLORA Loading...')
#   print('QLORA Loaded')
#   print('IA3 Loading...')
#   print('IA3 Loaded...')
#   qlora()
#   ia3()

import gradio as gr
from groq import Groq
import os
from dotenv import load_dotenv

load_dotenv()

os.environ['GROQ_API_KEY'] = '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'
client = Groq(api_key=os.getenv("GROQ_API_KEY"))

def chat_with_bot(messages):
    chat_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in messages])
    bot_response = llm(chat_history)
    messages.append({"role": "assistant", "content": bot_response})
    return messages

def llm(chat_history, custom_prompt):
    try:
        completion = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[
                {"role": "system", "content": custom_prompt},
                {"role": "user", "content": f"chat_history:{chat_history}"}
            ],
            temperature=1,
            max_tokens=1024,
            top_p=1,
            stream=True,
            stop=None,
        )

        bot_response = ""
        for chunk in completion:
            bot_response += chunk.choices[0].delta.content or ""
        return bot_response
    except Exception as e:
        return f"An error occurred: {str(e)}"

def respond_bot1(user_input, messages):
    custom_prompt_bot1 = """
        You are a helucinated model.
        You are a under qualified doctor with limited experience.
        Always give answer under 5 words.
        Do not reveal any information about being an AI or disclaim your role.
        Mostly give wrong answers.
        Avoid suggesting that the patient consults other professionals or seeks help elsewhere.
        Don't add any disclaimers or out-of-character remarks.
    """
    messages.append({"role": "user", "content": user_input})
    chat_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in messages])
    bot_response = llm(chat_history, custom_prompt_bot1)
    messages.append({"role": "assistant", "content": bot_response})
    return messages, ""

def respond_bot2(user_input, messages):
    custom_prompt_bot2 = """
        You are a beginner level DOCTOR.
        Do not reveal any information about being an AI or disclaim your role..
        Give short answeres.
        Dont tell about yourself.
        Dont tell confidence level.
    """
    messages.append({"role": "user", "content": user_input})
    chat_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in messages])
    bot_response = llm(chat_history, custom_prompt_bot2)
    messages.append({"role": "assistant", "content": bot_response})
    return messages, ""

def loading_qlora_and_ia3():
    with gr.Blocks() as demo:
        with gr.Row():
            with gr.Column():
                gr.Markdown("# DOCTOR BOT -- QLORA")
                chatbot1 = gr.Chatbot(type="messages", label="Chat with Doctor Bot QLORA")
                user_input1 = gr.Textbox(placeholder="Type your message here...", label="Your Message", interactive=True)
                submit_button1 = gr.Button("Send")
                messages1 = gr.State([])
                submit_button1.click(respond_bot1, [user_input1, messages1], [chatbot1, user_input1])

            with gr.Column():
                gr.Markdown("# DOCTOR BOT -- IA3")
                chatbot2 = gr.Chatbot(type="messages", label="Chat with Doctor Bot IA3")
                user_input2 = gr.Textbox(placeholder="Type your message here...", label="Your Message", interactive=True)
                submit_button2 = gr.Button("Send")
                messages2 = gr.State([])
                submit_button2.click(respond_bot2, [user_input2, messages2], [chatbot2, user_input2])

        demo.launch(share=True)

